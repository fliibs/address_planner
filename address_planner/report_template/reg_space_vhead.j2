{% for ss in space.sorted_subspace_list %}
//==========================================================
// Definition of reg {{ss.init_name.upper()}}
//==========================================================
`ifndef ADDR_{{ss.init_name.upper()}}

    typedef union packed {
        struct packed {
        {%- set index = namespace(value=0) -%}
        {% for field in ss.filled_field_list -%}
            {% if field.name == 'FilledField' %}
            logic [{{field.bit-1}}:0] reserved_{{index.value}};
            {%- set index.value = index.value + 1 -%}
            {% else %}
            logic [{{field.bit-1}}:0] {{field.name}};
            {%- endif -%}
        {% endfor %}
            } bits;
        logic [{{ss.bit-1}}:0] val;
    } {{ss.init_name.upper()}};

    `define {{ '%-40s' % '%s_SIZE' % ss.init_name.upper()}} {{ss.hex_transform(ss.size)}}
    `define {{ '%-40s' % '%s_OFFSET'  % ss.init_name.upper()}} {{ss.hex_transform((ss.offset/8)|int)}}
    `define {{ '%-40s' % '%s_RST_VAL' % ss.init_name.upper()}} {{ss.hex_transform((ss.init_value)|int)}}

`endif

{% for field in ss.sorted_field_list %}
`ifndef OFFSET_{{field.module_name_until_regbank.upper()}}
    `define {{field.module_name_until_regbank.upper()}}_OFFSET  {{field.bit_offset}}
    `define {{field.module_name_until_regbank.upper()}}_WIDTH   {{field.bit}}
    `define {{field.module_name_until_regbank.upper()}}_MASK    {{field.mask_vh}}
    `define {{field.module_name_until_regbank.upper()}}_RST_VAL {{field.init_value}}
`endif
{% endfor %}
{% endfor %}