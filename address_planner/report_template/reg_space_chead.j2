{% for ss in space.sub_space_list %}
//==========================================================
// Definition of reg {{ss.module_name_until_regbank.upper()}}
//==========================================================
#ifndef ADDR_{{ss.module_name_until_regbank.upper()}}

    typedef union{
        struct {
            {% for field in ss.field_list -%}
                uint32_t {{field.name}}: {{field.bit}};
            {% endfor -%}
    } bits;
        uint32_t val;
    } {{ss.module_name_until_regbank.upper()}};

    #define {{ '%-40s' % '%s_ADDR' % ss.module_name_until_regbank.upper()}} {{builtins.hex((ss.global_start_address/8)|int)}}
    #define {{ '%-40s' % '%s_SIZE' % ss.module_name_until_regbank.upper()}} {{builtins.hex(ss.size)}}
    #define {{ '%-40s' % '%s_OFFSET' % ss.module_name_until_regbank.upper()}} {{builtins.hex((ss.offset/8)|int)}}

#endif
{% for field in ss.field_list %}
#ifndef OFFSET_{{field.module_name_until_regbank.upper()}}
    #define {{field.module_name_until_regbank.upper()}}_OFFSET  {{field.bit_offset}}
    #define {{field.module_name_until_regbank.upper()}}_WIDTH   {{field.bit}}
    #define {{field.module_name_until_regbank.upper()}}_MASK    {{field.mask}}
    #define {{field.module_name_until_regbank.upper()}}_RST_VAL {{field.mask}}
#endif
{% endfor %}
{% endfor %}