
class yuu_apb_base_case extends uvm_test;
  virtual yuu_apb_interface vif;

  yuu_apb_env env;
  yuu_apb_env_config cfg;
  yuu_apb_virtual_sequencer vsequencer;
  ral_block_{{space.module_name}} model;
  uvm_status_e    status;
  uvm_reg_data_t  value;
  uvm_reg_hw_reset_seq reg_rst_seq;
  uvm_reg_bit_bash_seq bit_bash_seq;
  uvm_reg_access_seq   reg_acc_seq;
  bit pass_flag=0;
  
  `uvm_component_utils(yuu_apb_base_case)
  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction

  function void build_phase(uvm_phase phase);
    cfg = new("cfg");
    cfg.events = new("events");
    uvm_config_db #(virtual yuu_apb_interface)::get(null, get_full_name(), "vif", vif);
  
    cfg.apb_if = vif;
    begin
      yuu_apb_master_config m_cfg = new("e0_m0");
      m_cfg.apb3_enable = 1;
      m_cfg.apb4_enable = 1;
      m_cfg.idle_enable = 1;
      m_cfg.coverage_enable = 0;
      m_cfg.index = 0;
      cfg.set_config(m_cfg);
    end
    uvm_config_db #(yuu_apb_env_config)::set(this, "env", "cfg", cfg);
    env = yuu_apb_env::type_id::create("env", this);
  endfunction : build_phase
  
  virtual function void end_of_elaboration_phase(uvm_phase phase);
    int max_quit_count=5;
    int test_timeout_ns=50000000;
    super.end_of_elaboration_phase(phase);
    void'($value$plusargs("max_quit_count=%0d", max_quit_count));
    //uvm_top.set_max_quit_count(max_quit_count);
    void'($value$plusargs("test_timeout_ns=%0d", test_timeout_ns));
    uvm_top.set_timeout((test_timeout_ns * 1ns));
  endfunction : end_of_elaboration_phase
  
  function void connect_phase(uvm_phase phase);
    if (cfg.mst_cfg[0].use_reg_model) begin
      model = ral_block_{{space.module_name}}::type_id::create("model");
      model.add_hdl_path("tb_top.u_dut");
      model.build();
      model.lock_model();
      model.reset();
      model.default_map.set_sequencer(env.vsequencer.master_sequencer[0], env.master[0].adapter);
      env.master[0].predictor.map = model.default_map;
    end
    vsequencer = env.vsequencer;
  endfunction

  function case_pass();
    pass_flag=1;
    $display("simulation passed");
  endfunction 
endclass


class sanity_test extends yuu_apb_base_case;
  `uvm_component_utils(sanity_test)

  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction : new

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    cfg.mst_cfg[0].idle_enable = 0;
    cfg.mst_cfg[0].use_reg_model = 1;
  endfunction : build_phase

  task run_phase(uvm_phase phase);
    reg_rst_seq=new();
    reg_rst_seq.model = model;
    phase.raise_objection(this);
    #5000ns;
    reg_rst_seq.start(null);
    #5000ns;
    phase.drop_objection(this);
  endtask : run_phase
endclass : sanity_test

class ral_reg_rst_test extends yuu_apb_base_case;
  `uvm_component_utils(ral_reg_rst_test)

  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction : new

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    cfg.mst_cfg[0].idle_enable = 0;
    cfg.mst_cfg[0].use_reg_model = 1;
  endfunction : build_phase

  task run_phase(uvm_phase phase);
    reg_rst_seq=new();
    reg_rst_seq.model = model;
    phase.raise_objection(this);
    #5000ns;
    reg_rst_seq.start(null);
    #5000ns;
    case_pass();
    phase.drop_objection(this);
  endtask : run_phase
endclass : ral_reg_rst_test

class ral_bit_bash_test extends yuu_apb_base_case;
  `uvm_component_utils(ral_bit_bash_test)

  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction : new

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    cfg.mst_cfg[0].idle_enable = 0;
    cfg.mst_cfg[0].use_reg_model = 1;
  endfunction : build_phase

  task run_phase(uvm_phase phase);
    bit_bash_seq=new();
    bit_bash_seq.model = model;
    phase.raise_objection(this);
    #5000ns;
    bit_bash_seq.start(null);
    #5000ns;
    case_pass();
    phase.drop_objection(this);
  endtask : run_phase
endclass : ral_bit_bash_test

class ral_reg_acc_test extends yuu_apb_base_case;
  `uvm_component_utils(ral_reg_acc_test)

  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction : new

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    cfg.mst_cfg[0].idle_enable = 0;
    cfg.mst_cfg[0].use_reg_model = 1;
  endfunction : build_phase

  task run_phase(uvm_phase phase);
    reg_acc_seq=new();
    reg_acc_seq.model = model;
    phase.raise_objection(this);
    #5000ns;
    reg_acc_seq.start(null);
    #5000ns;
    case_pass();
    phase.drop_objection(this);
  endtask : run_phase
endclass : ral_reg_acc_test
